## no critic (RequireFilenameMatchesPackage);
package sles4sap;
use base "opensusebasetest";

use strict;
use testapi;
use utils;
use isotovideo;

use Exporter 'import';
our @EXPORT_OK = qw($ps_cmd $sapadmin $sid setup test_common_sap);

our $ps_cmd = 'ps auxw | grep HDB | grep -vw grep';

# The SAP Admin was set in sles4sap/hana
our $sapadmin = get_required_var('SAPADM');
our $sid = uc(substr($sapadmin, 0, 3));

our $prev_console;

sub pre_run_hook {
    my ($self) = @_;
    if (isotovideo::get_version() == 12) {
        $prev_console = $autotest::selected_console;
    } else {
        $prev_console = $testapi::selected_console;
    }
}

sub post_run_hook {
    my ($self) = @_;

    return unless ($prev_console);
    select_console($prev_console, await_console => 0);
    ensure_unlocked_desktop if ($prev_console eq 'x11');
}

sub setup {
    select_console 'root-console';

    # Allow SAP Admin user to inform status via $testapi::serialdev
    assert_script_run "chown $sapadmin /dev/$testapi::serialdev";

    type_string "su - $sapadmin\n";

    # Change the working shell to bash as SAP's installer sets the admin
    # user's shell to /bin/csh and csh has problems with strings that start
    # with ~ which can be generated by testapi::hashed_string() leading to
    # unexpected failures of script_output() or assert_script_run()
    type_string "exec bash\n";

    my $output = script_output "sapcontrol -nr 00 -function GetVersionInfo";
    die "sapcontrol: GetVersionInfo API failed\n\n$output" unless ($output =~ /GetVersionInfo[\r\n]+OK/);

    $output = script_output "sapcontrol -nr 00 -function GetInstanceProperties | grep ^SAP";
    die "sapcontrol: GetInstanceProperties API failed\n\n$output" unless ($output =~ /SAPSYSTEM.+SAPSYSTEMNAME.+SAPLOCALHOST/s);

    $output =~ /SAPSYSTEMNAME, Attribute, ([A-Z][A-Z0-9]{2})/m;
    die "sapcontrol: SAP administrator [$sapadmin] does not match with System SID [$1]" if ($1 ne $sid);

}

sub test_common_sap {
    my $output = script_output "sapcontrol -nr 00 -function Stop";
    die "sapcontrol: Stop API failed\n\n$output" unless ($output =~ /Stop[\r\n]+OK/);

    $output = script_output "sapcontrol -nr 00 -function StopService";
    die "sapcontrol: StopService API failed\n\n$output" unless ($output =~ /StopService[\r\n]+OK/);

    script_run "$ps_cmd | wc -l ; $ps_cmd";
    save_screenshot;

    $output = script_output "sapcontrol -nr 00 -function StartService $sid";
    die "sapcontrol: StartService API failed\n\n$output" unless ($output =~ /StartService[\r\n]+OK/);

    $output = script_output $ps_cmd;
    my @olines = split(/\n/, $output);
    die "sapcontrol: wrong number of processes running after an StartService\n\n" . @olines unless (@olines == 1);
    die "sapcontrol failed to start the service" unless ($output =~ /^$sapadmin.+sapstartsrv/);

    $output = script_output "sapcontrol -nr 00 -function Start";
    die "sapcontrol: Start API failed\n\n$output" unless ($output =~ /Start[\r\n]+OK/);

    $output = script_output $ps_cmd;
    @olines = split(/\n/, $output);
    die "sapcontrol: failed to start the instance" unless (@olines > 1);

    # Rollback changes to $testapi::serialdev and close the window
    type_string "exit\n";
    ensure_serialdev_permissions;
}

1;
